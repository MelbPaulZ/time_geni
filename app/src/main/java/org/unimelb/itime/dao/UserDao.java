package org.unimelb.itime.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Void> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property PersonalAlias = new Property(2, String.class, "personalAlias", false, "PERSONAL_ALIAS");
        public final static Property BindingEmail = new Property(3, String.class, "bindingEmail", false, "BINDING_EMAIL");
        public final static Property BindingFacebookId = new Property(4, String.class, "bindingFacebookId", false, "BINDING_FACEBOOK_ID");
        public final static Property BindingPhone = new Property(5, String.class, "bindingPhone", false, "BINDING_PHONE");
        public final static Property ProfilePhotoUrl = new Property(6, String.class, "profilePhotoUrl", false, "PROFILE_PHOTO_URL");
        public final static Property DefaultEventAlertTimeId = new Property(7, Long.class, "defaultEventAlertTimeId", false, "DEFAULT_EVENT_ALERT_TIME_ID");
        public final static Property DeviceToken = new Property(8, String.class, "deviceToken", false, "DEVICE_TOKEN");
        public final static Property DeviceId = new Property(9, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property DefaultRatingVisibilityTypeId = new Property(10, String.class, "defaultRatingVisibilityTypeId", false, "DEFAULT_RATING_VISIBILITY_TYPE_ID");
        public final static Property DefaultEventVisibilityTypeId = new Property(11, String.class, "defaultEventVisibilityTypeId", false, "DEFAULT_EVENT_VISIBILITY_TYPE_ID");
        public final static Property IfAcceptPublicEventPush = new Property(12, String.class, "ifAcceptPublicEventPush", false, "IF_ACCEPT_PUBLIC_EVENT_PUSH");
        public final static Property AverageRatingValue = new Property(13, String.class, "averageRatingValue", false, "AVERAGE_RATING_VALUE");
        public final static Property CreatedAt = new Property(14, String.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(15, String.class, "updatedAt", false, "UPDATED_AT");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"ID\" TEXT NOT NULL ," + // 0: id
                "\"USER_ID\" TEXT NOT NULL ," + // 1: userId
                "\"PERSONAL_ALIAS\" TEXT," + // 2: personalAlias
                "\"BINDING_EMAIL\" TEXT," + // 3: bindingEmail
                "\"BINDING_FACEBOOK_ID\" TEXT," + // 4: bindingFacebookId
                "\"BINDING_PHONE\" TEXT," + // 5: bindingPhone
                "\"PROFILE_PHOTO_URL\" TEXT," + // 6: profilePhotoUrl
                "\"DEFAULT_EVENT_ALERT_TIME_ID\" INTEGER," + // 7: defaultEventAlertTimeId
                "\"DEVICE_TOKEN\" TEXT," + // 8: deviceToken
                "\"DEVICE_ID\" TEXT," + // 9: deviceId
                "\"DEFAULT_RATING_VISIBILITY_TYPE_ID\" TEXT," + // 10: defaultRatingVisibilityTypeId
                "\"DEFAULT_EVENT_VISIBILITY_TYPE_ID\" TEXT," + // 11: defaultEventVisibilityTypeId
                "\"IF_ACCEPT_PUBLIC_EVENT_PUSH\" TEXT," + // 12: ifAcceptPublicEventPush
                "\"AVERAGE_RATING_VALUE\" TEXT," + // 13: averageRatingValue
                "\"CREATED_AT\" TEXT," + // 14: createdAt
                "\"UPDATED_AT\" TEXT);"); // 15: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getUserId());
 
        String personalAlias = entity.getPersonalAlias();
        if (personalAlias != null) {
            stmt.bindString(3, personalAlias);
        }
 
        String bindingEmail = entity.getBindingEmail();
        if (bindingEmail != null) {
            stmt.bindString(4, bindingEmail);
        }
 
        String bindingFacebookId = entity.getBindingFacebookId();
        if (bindingFacebookId != null) {
            stmt.bindString(5, bindingFacebookId);
        }
 
        String bindingPhone = entity.getBindingPhone();
        if (bindingPhone != null) {
            stmt.bindString(6, bindingPhone);
        }
 
        String profilePhotoUrl = entity.getProfilePhotoUrl();
        if (profilePhotoUrl != null) {
            stmt.bindString(7, profilePhotoUrl);
        }
 
        Long defaultEventAlertTimeId = entity.getDefaultEventAlertTimeId();
        if (defaultEventAlertTimeId != null) {
            stmt.bindLong(8, defaultEventAlertTimeId);
        }
 
        String deviceToken = entity.getDeviceToken();
        if (deviceToken != null) {
            stmt.bindString(9, deviceToken);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(10, deviceId);
        }
 
        String defaultRatingVisibilityTypeId = entity.getDefaultRatingVisibilityTypeId();
        if (defaultRatingVisibilityTypeId != null) {
            stmt.bindString(11, defaultRatingVisibilityTypeId);
        }
 
        String defaultEventVisibilityTypeId = entity.getDefaultEventVisibilityTypeId();
        if (defaultEventVisibilityTypeId != null) {
            stmt.bindString(12, defaultEventVisibilityTypeId);
        }
 
        String ifAcceptPublicEventPush = entity.getIfAcceptPublicEventPush();
        if (ifAcceptPublicEventPush != null) {
            stmt.bindString(13, ifAcceptPublicEventPush);
        }
 
        String averageRatingValue = entity.getAverageRatingValue();
        if (averageRatingValue != null) {
            stmt.bindString(14, averageRatingValue);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(15, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(16, updatedAt);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getUserId());
 
        String personalAlias = entity.getPersonalAlias();
        if (personalAlias != null) {
            stmt.bindString(3, personalAlias);
        }
 
        String bindingEmail = entity.getBindingEmail();
        if (bindingEmail != null) {
            stmt.bindString(4, bindingEmail);
        }
 
        String bindingFacebookId = entity.getBindingFacebookId();
        if (bindingFacebookId != null) {
            stmt.bindString(5, bindingFacebookId);
        }
 
        String bindingPhone = entity.getBindingPhone();
        if (bindingPhone != null) {
            stmt.bindString(6, bindingPhone);
        }
 
        String profilePhotoUrl = entity.getProfilePhotoUrl();
        if (profilePhotoUrl != null) {
            stmt.bindString(7, profilePhotoUrl);
        }
 
        Long defaultEventAlertTimeId = entity.getDefaultEventAlertTimeId();
        if (defaultEventAlertTimeId != null) {
            stmt.bindLong(8, defaultEventAlertTimeId);
        }
 
        String deviceToken = entity.getDeviceToken();
        if (deviceToken != null) {
            stmt.bindString(9, deviceToken);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(10, deviceId);
        }
 
        String defaultRatingVisibilityTypeId = entity.getDefaultRatingVisibilityTypeId();
        if (defaultRatingVisibilityTypeId != null) {
            stmt.bindString(11, defaultRatingVisibilityTypeId);
        }
 
        String defaultEventVisibilityTypeId = entity.getDefaultEventVisibilityTypeId();
        if (defaultEventVisibilityTypeId != null) {
            stmt.bindString(12, defaultEventVisibilityTypeId);
        }
 
        String ifAcceptPublicEventPush = entity.getIfAcceptPublicEventPush();
        if (ifAcceptPublicEventPush != null) {
            stmt.bindString(13, ifAcceptPublicEventPush);
        }
 
        String averageRatingValue = entity.getAverageRatingValue();
        if (averageRatingValue != null) {
            stmt.bindString(14, averageRatingValue);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(15, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(16, updatedAt);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // personalAlias
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bindingEmail
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bindingFacebookId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bindingPhone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // profilePhotoUrl
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // defaultEventAlertTimeId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // deviceToken
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // deviceId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // defaultRatingVisibilityTypeId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // defaultEventVisibilityTypeId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ifAcceptPublicEventPush
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // averageRatingValue
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // createdAt
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // updatedAt
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setUserId(cursor.getString(offset + 1));
        entity.setPersonalAlias(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBindingEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBindingFacebookId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBindingPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProfilePhotoUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDefaultEventAlertTimeId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setDeviceToken(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDeviceId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDefaultRatingVisibilityTypeId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDefaultEventVisibilityTypeId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIfAcceptPublicEventPush(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAverageRatingValue(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCreatedAt(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUpdatedAt(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(User entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(User entity) {
        return null;
    }

    @Override
    public boolean hasKey(User entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
